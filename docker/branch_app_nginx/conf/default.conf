# Nginx configuration file for branch_app_nginx
# Accept requests from branch-app-domain-server after SSL termination and proxy to the appropriate upstream
# If the request is for a static file, serve it directly from the public directory

server {
  listen 8080;
  server_name _;
  server_name_in_redirect off;
  port_in_redirect off;
  root /public;

  try_files $uri/index.html $uri $uri.html @app;

  client_max_body_size 10m;

  # Internal proxy endpoint to query Consul
  location /__consul/ {
    internal;
    proxy_set_header Host $host;
    proxy_redirect   off;
    proxy_pass       http://172.17.0.1:8500/;
  }

  location @app {
    set $upstream "";
    rewrite_by_lua '
      local cjson = require "cjson.safe"

      local function extract_host(host_str)
        local regex = "([^%.]+%.apps%.staging%.gumroad%.org)"
        return host_str:match(regex)
      end

      -- read upstream from consul via internal location capture
      local host = ngx.var.http_host
      local res = ngx.location.capture("/__consul/v1/kv/" .. extract_host(host))
      if not res or res.status ~= 200 then
        return ngx.exit(502)
      end

      local data = cjson.decode(res.body)
      if not data or not data[1] or not data[1].Value then
        return ngx.exit(502)
      end

      local upstream = ngx.decode_base64(data[1].Value)
      if not upstream or upstream == "" then
        return ngx.exit(502)
      end

      ngx.var.upstream = upstream
    ';

    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_redirect   off;
    proxy_pass       http://$upstream;

    keepalive_timeout 75;
    proxy_read_timeout 120;

    proxy_buffers           16 64k;
    proxy_buffer_size       64k;
    client_body_buffer_size 128k;
  }
}
